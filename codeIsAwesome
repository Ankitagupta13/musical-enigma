#backtracking
#include<iostream>
using namespace std;

//n queen problem

bool ispossible(int **matrix,int n,int row,int col){
	
	for(int i=row-1;i>=0;i--){
		if(matrix[i][col]==1){
			return false;
		}
	}
	
	for(int i=row-1, j=col+1;i>=0&&j<n;i--,j++){
		if(matrix[i][j]==1){
			return false;
		}
	}
	
	for(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--){
		if(matrix[i][j]==1){
			return false;
		}
	}
	return true;
}

void queen_solver(int **matrix, int n,int row){
	
	if(row==n){
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				cout<<matrix[i][j]<<" ";
			}
			cout<<endl;
		}
		cout<<endl;
		return;
	}
	
	for(int j=0;j<n;j++){
		
		if(ispossible(matrix,n,row,j)){
			matrix[row][j]=1;
			queen_solver(matrix,n,row+1);
			matrix[row][j]=0;
		}
	}
	return;
	
}

int main(){
	
	int n;
	n=4;
	int **matrix = new int*[n];
	for(int i=0;i<n;i++){
		matrix[i]=new int[n];
		for(int j=0;j<n;j++){
			matrix[i][j]=0;
		}
	}
	queen_solver(matrix,n,0);
	
	
	
	for(int i=0;i<n;i++){
		delete []matrix[i];
	}
	delete []matrix;
	
	
}
